services:
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true
    networks: [app_network]

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml
    networks: [app_network]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    networks: [app_network]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafanadata:/var/lib/grafana
    networks: [app_network]

  backend:
    build: .
    container_name: backend
    ports:
      - "8080:8080"
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks: [app_network]

  postgres:
    image: postgres:16
    container_name: postgres_app
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [app_network]
  redis:
    image: redis:7
    container_name: redis_app
    ports: ["6379:6379"]
    networks: [app_network]

volumes:
  postgresdata:
  grafanadata:
  prometheusdata:

networks:
  app_network:
    driver: bridge


# TEST BACKEND
# ab -k -c 5 -n 5000 'http://localhost:8080/api/users/all_users' & \
# ab -k -c 5 -n 5000 'http://localhost:8080/api/users/get_user/1' & \
# ab -k -c 5 -n 5000 'http://localhost:8080/api/tasks/get_task_by_id/1' & \
# ab -k -c 5 -n 5000 'http://localhost:8080/api/tasks/get_task_by_id/2' & \
# ab -k -c 5 -n 5000 'http://localhost:8080/api/tasks/get_task_by_id/34' & \
# ab -k -c 5 -n 5000 'http://localhost:8080/api/tasks/get_task_by_id/36' & \
# ab -k -c 50 -n 5000 'http://localhost:8080/tasks/get_all_tasks?seconds_sleep=1' & \
# ab -k -c 50 -n 5000 'http://localhost:8080/tasks/get_user_tasks/1?seconds_sleep=2'
